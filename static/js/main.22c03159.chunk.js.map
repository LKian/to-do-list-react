{"version":3,"sources":["components/Form.js","components/List.js","components/Header.js","components/Footer.js","components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["StyledForm","styled","form","Form","count","onSubmit","search","onChange","value","placeholder","className","StyledList","ul","List","toDoList","deleteMe","map","toDoItem","index","onClick","StyledHeading","h1","Header","StyledFooter","footer","Footer","StyledContainer","div","ToDoList","useState","setSearch","setCount","toDo","setToDo","e","preventDefault","target","console","log","filter","item","StyledApp","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4sBAGA,IAeMA,EAAaC,IAAOC,KAAV,KAwBDC,EAvCF,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SACvC,OACE,kBAACP,EAAD,CAAYK,SAAUA,GACpB,2BACEG,MAAOF,EACPC,SAAUA,EACVE,YAAY,sBAEd,yBAAKC,UAAU,YAAf,kBACiB,8BAAON,M,2YCT9B,IAaMO,EAAaV,IAAOW,GAAV,KAsBDC,EAnCF,SAAC,GAAkC,EAAhCT,MAAiC,IAA1BU,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC/B,OACE,kBAACJ,EAAD,KACGG,EAASE,KAAI,SAACC,EAAUC,GAAX,OACZ,4BACE,0BAAMC,QAAS,kBAAMJ,EAASE,KAA9B,KACCA,Q,8FCNX,IAIMG,EAAgBnB,IAAOoB,GAAV,KAIJC,EARA,WACb,OAAO,kBAACF,EAAD,qB,qECDT,IAIMG,EAAetB,IAAOuB,OAAV,KAEHC,EANA,WACb,OAAO,kBAACF,EAAD,gB,wFCIT,IA2CMG,EAAkBzB,IAAO0B,IAAV,KAGNC,EA9CE,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACdvB,EADc,KACNwB,EADM,OAEKD,mBAAS,GAFd,mBAEdzB,EAFc,KAEP2B,EAFO,OAGGF,mBAAS,IAHZ,mBAGdG,EAHc,KAGRC,EAHQ,KA4BrB,OACE,kBAACP,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEnB,SA3BgB,SAAC2B,GACrBA,EAAEC,iBACFL,EAAUI,EAAEE,OAAO5B,QA0BfH,SAvBgB,SAAC6B,IACrBA,EAAEC,iBACa,KAAX7B,KAEFyB,EADiB3B,EAAQ,GAEzB6B,EAAQ,GAAD,mBAAKD,GAAL,CAAW1B,KAClBwB,EAAU,MAkBR1B,MAAOA,EACPE,OAAQA,IAEV,kBAAC,EAAD,CAAMQ,SAAUkB,EAAMjB,SAfJ,SAACmB,GACrBG,QAAQC,IAAI,UAAWJ,GAEvBD,EAAQD,EAAKO,QAAO,SAACC,GAAD,OAAUA,IAASN,SAarC,kBAAC,EAAD,Q,iQCjCN,IAAMO,EAAYxC,IAAO0B,IAAV,KAaAe,EArBf,WACE,OACE,kBAACD,EAAD,CAAW/B,UAAU,OACnB,kBAAC,EAAD,QCIciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.22c03159.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Form = ({ count, onSubmit, search, onChange }) => {\r\n  return (\r\n    <StyledForm onSubmit={onSubmit}>\r\n      <input\r\n        value={search}\r\n        onChange={onChange}\r\n        placeholder='Type your \"to do\"'\r\n      />\r\n      <div className=\"footnote\">\r\n        Items on List: <span>{count}</span>\r\n      </div>\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\nconst StyledForm = styled.form`\r\n  text-align: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  input {\r\n    padding: 10px 15px;\r\n    border-radius: 5px;\r\n  }\r\n  .footnote {\r\n    padding-bottom: 10px 0;\r\n    margin-bottom: 10px;\r\n    font-size: 0.8em;\r\n    text-align: left;\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  span {\r\n    font-weight: bolder;\r\n    margin-left: 10px;\r\n  }\r\n`;\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst List = ({ count, toDoList, deleteMe }) => {\r\n  return (\r\n    <StyledList>\r\n      {toDoList.map((toDoItem, index) => (\r\n        <li>\r\n          <span onClick={() => deleteMe(toDoItem)}>x</span>\r\n          {toDoItem}\r\n        </li>\r\n      ))}\r\n    </StyledList>\r\n  );\r\n};\r\n\r\nconst StyledList = styled.ul`\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n  li {\r\n    display: flex;\r\n    border-radius: 5px;\r\n    padding: 5px;\r\n    margin: 5px 0;\r\n    align-items: center;\r\n    background-color: #282c34;\r\n  }\r\n  span {\r\n    margin-right: 25px;\r\n    color: red;\r\n    padding: 5px;\r\n  }\r\n  span:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Header = () => {\r\n  return <StyledHeading> To Do List</StyledHeading>;\r\n};\r\n\r\nconst StyledHeading = styled.h1`\r\n  text-align: center;\r\n`;\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Footer = () => {\r\n  return <StyledFooter>Footer</StyledFooter>;\r\n};\r\n\r\nconst StyledFooter = styled.footer``;\r\n\r\nexport default Footer;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Form from \"./Form\";\r\nimport List from \"./List\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\n\r\nconst ToDoList = () => {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [count, setCount] = useState(0);\r\n  const [toDo, setToDo] = useState([]);\r\n\r\n  const searchHandler = (e) => {\r\n    e.preventDefault();\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (search !== \"\") {\r\n      const countNew = count + 1;\r\n      setCount(countNew);\r\n      setToDo([...toDo, search]);\r\n      setSearch(\"\");\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  const deleteHandler = (e) => {\r\n    console.log(\"deleted\", e);\r\n\r\n    setToDo(toDo.filter((item) => item !== e));\r\n  };\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <Header />\r\n      <Form\r\n        onChange={searchHandler}\r\n        onSubmit={submitHandler}\r\n        count={count}\r\n        search={search}\r\n      />\r\n      <List toDoList={toDo} deleteMe={deleteHandler} />\r\n      <Footer />\r\n    </StyledContainer>\r\n  );\r\n};\r\n\r\nconst StyledContainer = styled.div`\r\n  width: 500px;\r\n`;\r\nexport default ToDoList;\r\n","import React from \"react\";\nimport ToDoList from \"./components/ToDoList\";\nimport styled from \"styled-components\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <StyledApp className=\"App\">\n      <ToDoList />\n    </StyledApp>\n  );\n}\n\nconst StyledApp = styled.div`\n  background-color: #1d1d1d;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  color: #fff;\n\n  .App-link {\n    color: #61dafb;\n  }\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}